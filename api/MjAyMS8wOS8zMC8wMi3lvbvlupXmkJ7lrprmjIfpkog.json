{"title":"彻底搞定指针","date":"2021-09-30T17:53:20.000Z","date_formatted":{"ll":"2021年9月30日","L":"2021/09/30","MM-DD":"09-30"},"thumbnail":"/img/02/cover.png","link":"2021/09/30/02-彻底搞定指针","tags":["c"],"updated":"2021-09-30T18:28:13.474Z","content":"<p><strong>注：该系列文章主要摘自《彻底搞定C指针》一书，姚云飞著。</strong></p>\n<h2 id=\"1.变量的实质\"><strong>1.变量的实质</strong><a title=\"#1.变量的实质\" href=\"#1.变量的实质\"></a></h2>\n<h3 id=\"内存空间\"><strong>内存空间</strong><a title=\"#内存空间\" href=\"#内存空间\"></a></h3>\n<p>内存就是一个存放数据的空间，如同电影院中的座位一样。我们还发现电影院中的座位都有一个序号，同样地，每一块内存空间也有一个“序号”，这个“序号”被称为该内存的地址。</p>\n<p>我们来看看下面简单的代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;\t\t\t\t\t<span class=\"comment\">//声明一个变量</span></span><br><span class=\"line\">a = <span class=\"number\">10</span>;\t\t\t\t\t<span class=\"comment\">//给变量赋值</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;<span class=\"keyword\">sizeof</span>(a)&lt;&lt;<span class=\"built_in\">endl</span>;\t\t\t<span class=\"comment\">//输出该变量所占用的内存空间，单位是字节</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;\t\t\t\t<span class=\"comment\">//输出该变量的值</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;&amp;a&lt;&lt;<span class=\"built_in\">endl</span>;\t\t\t\t<span class=\"comment\">//输出该变量的地址c</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中的<code>&amp;a</code>就是地址（&amp;为取地址运算符），即a对应的内存空间的地址，他是一个八位十六进制的数字。当我们声明一个变量的时，往往需要加上数据类型如int、char、double等，这是为了告诉编译器这个变量需要占用多大的内存空间，编译器会根据数据类型来给这个变量分配相应大小的内存空间。在64位系统中，int占4个字节，char占1个字节，double占8个字节。当给变量赋值时，该值就会存储到变量所对应的内存空间中。</p>\n<h3 id=\"变量的实质\"><strong>变量的实质</strong><a title=\"#变量的实质\" href=\"#变量的实质\"></a></h3>\n<p>我们常说的变量是指这个变量的名字，如上面代码中的a，这个a代表其对应的内存空间的名字，相当于一个标识，编译器能够通过这个标识找到该内存空间，获取其中的值。</p>\n<h2 id=\"2.指针的实质\"><strong>2.指针的实质</strong><a title=\"#2.指针的实质\" href=\"#2.指针的实质\"></a></h2>\n<h3 id=\"举个栗子\"><strong>举个栗子</strong><a title=\"#举个栗子\" href=\"#举个栗子\"></a></h3>\n<p>我之前找你借了一本书，现在要还给你。我来到了你的宿舍，但是你不在宿舍，于是我把书放到了你书桌的第一个抽屉里面，并在你的桌子上留下了一张纸条，上面写着：你的书放在第一个抽屉里面。当你回来看到这张纸条，自然就能够找到书了。纸条不是书，但是我们能通过纸条找到这本书，因为纸条上写着书的位置。</p>\n<h3 id=\"指针的实质\"><strong>指针的实质</strong><a title=\"#指针的实质\" href=\"#指针的实质\"></a></h3>\n<p>同样滴，我们能够通过指针变量找到某个内存中的数据，因为指针变量所对应的内存空间中保存的是该内存的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>* P1;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p2;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\">p1 = &amp;a;</span><br><span class=\"line\">*p1 = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>看看上面的代码，前两行是声明一个指针变量，这两种写法都可行并且意义一样。第一种侧重于<code>P1</code>是一个指针变量，它对应的内存空间中的数据类型为<code>int*</code>，表示一个地址，该地址对应的内存空间中的数据类型为<code>int</code>，编译器会根据<code>int*</code>这个类型为<code>P1</code>分配一定大小的内存空间（指针变量一般占用4个字节的内存空间）。第二种侧重于<code>*P2</code>是一个<code>int</code>类型的变量。</p>\n<p>经常说“某个变量所对应的内存空间中的数据是XXX”很繁琐，一般说成“某个变量的值为XXX”。</p>\n<p>指针变量<code>P1</code>保存的是一个地址值，该地址指向的空间中保存着<code>int</code>类型的数据，我们就可以把变量<code>a</code>的地址赋值给指针变量<code>P1</code>，并且可以通过<code>*P1</code>来操作变量<code>a</code>的值（*是取内容运算符）。</p>\n<h2 id=\"3.指针与数组名\"><strong>3.指针与数组名</strong><a title=\"#3.指针与数组名\" href=\"#3.指针与数组名\"></a></h2>\n<h3 id=\"数组名\"><strong>数组名</strong><a title=\"#数组名\" href=\"#数组名\"></a></h3>\n<p>执行下面的代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>我们会发现输出的两个数字的差值为4，并且都为一个八位十六进制数字，很容易想到是一个地址值。再尝试以下代码来遍历数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;a[i]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;*(a+i)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>我们会发现通过<code>*(a+i)</code>的方式也能访问数组，那么就可以推断出：<strong>数组名就是数组首元素的地址</strong>。</p>\n<h3 id=\"通过指针来访问数组\"><strong>通过指针来访问数组</strong><a title=\"#通过指针来访问数组\" href=\"#通过指针来访问数组\"></a></h3>\n<p>既然数组名就是数组首元素的地址，那么我可以将这个数组名赋值给一个指针变量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = a;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;*(p+i)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样也能够遍历输出数组，那么<code>*(a+i)</code>与<code>*(p+i)</code>有什么区别呢？</p>\n<h3 id=\"数组名与指针的区别\"><strong>数组名与指针的区别</strong><a title=\"#数组名与指针的区别\" href=\"#数组名与指针的区别\"></a></h3>\n<p>我们试试以下两段代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*p&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    p++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;*a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>会发现第一段代码是可行的，而第二段代码会报错（VS2012），如下图</p>\n<p><img src=\"../img/02/1.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>提示：表达式必须是可修改的左值。<code>a++</code>也就是<code>a=a+1</code>，那么就是说a的值不能修改，这就说明a是一个<strong>指针常量</strong>，不能修改他的值。</p>\n<h3 id=\"const-int-*p与int-*const-p\"><strong>const int *p与int *const p</strong><a title=\"#const-int-*p与int-*const-p\" href=\"#const-int-*p与int-*const-p\"></a></h3>\n<p>上面说的指针常量是指<code>int *const p</code>，<code>const</code>修饰<code>p</code>，那么指针变量<code>p</code>的值不能被修改。对于<code>const int *p</code>，<code>const</code>修饰的是<code>*p</code>，<code>*p</code>的值不能被修改。</p>\n<h2 id=\"4.二级指针\"><strong>4.二级指针</strong><a title=\"#4.二级指针\" href=\"#4.二级指针\"></a></h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> **pp;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\">p = &amp;a;</span><br><span class=\"line\">pp = &amp;p;</span><br></pre></td></tr></table></figure>\n<p>这就声明了一个二级指针，他跟普通变量一样，系统会为其分配一定大小的内存，pp是该内存空间的名字。同一级指针一样，<code>*pp</code>是该内存空间里面的值，其数据类型为<code>int *</code>，也就是说指针变量<code>pp</code>保存的是一个一级指针的地址。</p>\n<p>弄得这么复杂有什么用呢？下面我们来看一个具体的例子。</p>\n<p>设计一个函数：<code>void find(char array[], char search, char *pa)</code><br>\n要求：这个函数参数中的数组 array 是以 0 值为结束的字符串，要求在字符串array 中查找字符是参数 search 里的字符。如果找到，函数通过第三个参数（pa）返回值为 array 字符串中第一个找到的字符的地址。如果没找到，则为pa 为 0。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[],<span class=\"keyword\">char</span> search,<span class=\"keyword\">char</span> *p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;*(<span class=\"built_in\">array</span>+i)!=<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span>+i)==search)&#123;</span><br><span class=\"line\">\t\t\tp = <span class=\"built_in\">array</span> + i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span>+i)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其能否实现相应的功能呢？我们来调用一下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> str[] = <span class=\"string\">&quot;abcdefg&quot;</span>;\t\t<span class=\"comment\">//自动补0</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *pi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfind(str,a,pi);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pi==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;没找到&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果pi指向的是字符串，则cout会输出该字符串，用(void*)转换就可以输出地址</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;所查找的字母地址为:&quot;</span>&lt;&lt;(<span class=\"keyword\">void</span>*)pi&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行后，输出的结果是没找到，说明这个函数设计的不对。我们来分析一下，首先明确一点，当调用函数进行传参时，实参的值会复制给形参，然后形参在函数中运作，不会影响到实参的数值。我们发现函数中改变的是形参<code>p</code>，的值而不会影响到实参<code>pi</code>的值，所以自始至终<code>pi=0</code>。我们现在做如下修改：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">char</span> <span class=\"built_in\">array</span>[],<span class=\"keyword\">char</span> search,<span class=\"keyword\">char</span> **p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;*(<span class=\"built_in\">array</span>+i)!=<span class=\"number\">0</span>;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span>+i)==search)&#123;</span><br><span class=\"line\">\t\t\t*p = <span class=\"built_in\">array</span> + i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(*(<span class=\"built_in\">array</span>+i)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t*p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> str[] = <span class=\"string\">&quot;abcdefg&quot;</span>;\t\t<span class=\"comment\">//自动补0</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> a = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *pi = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tfind(str,a,&amp;pi);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pi==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;没找到&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果pi指向的是字符串，则cout会输出该字符串，用(void*)转换就可以输出地址</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;所查找的字母地址为:&quot;</span>&lt;&lt;(<span class=\"keyword\">void</span>*)pi&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把指针变量<code>pi</code>的地址当做参数传进去，那么就可以通过二级指针变量<code>p</code>来操作<code>pi</code>的值。</p>\n<h2 id=\"5.-函数参数的传递\"><strong>5. 函数参数的传递</strong><a title=\"#5.-函数参数的传递\" href=\"#5.-函数参数的传递\"></a></h2>\n<p>我们来写一个交换两个变量值得函数，通过以下三种参数传递方式来看看指针的作用。</p>\n<h3 id=\"值传递\"><strong>值传递</strong><a title=\"#值传递\" href=\"#值传递\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    tmp = x;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">    y = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    swap(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">&quot;b = &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行之后发现两个变量的值并有没交换，这里更上面那个例子情况一样，函数中的参数为形参，他的值是拷贝实参的，操作形参时并不会影响到实参的值。</p>\n<h3 id=\"地址传递\"><strong>地址传递</strong><a title=\"#地址传递\" href=\"#地址传递\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x,<span class=\"keyword\">int</span> *y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    tmp = *x;</span><br><span class=\"line\">    *x = *y;</span><br><span class=\"line\">    *y = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    swap(&amp;a,&amp;b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">&quot;b = &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改一下函数，传递变量的地址，通过指针来操作其对应内存空间的值就能够达到交换的目的。</p>\n<h3 id=\"引用传递\"><strong>引用传递</strong><a title=\"#引用传递\" href=\"#引用传递\"></a></h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x,<span class=\"keyword\">int</span> &amp;y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp;</span><br><span class=\"line\">    tmp = x;</span><br><span class=\"line\">    x = y;</span><br><span class=\"line\">    y = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    swap(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;a = &quot;</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>&lt;&lt;<span class=\"string\">&quot;b = &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>引用就相当于给变量起“别名”，操作<code>X</code>、<code>y</code>也能改变<code>a</code>、<code>b</code>的值</p>\n","next":{"title":"记录hexo博客搭建过程","link":"2021/09/30/01-记录hexo博客搭建过程"},"plink":"http://example.com/2021/09/30/02-彻底搞定指针/","toc":[{"id":"1.变量的实质","title":"1.变量的实质","index":"1","children":[{"id":"内存空间","title":"内存空间","index":"1.1"},{"id":"变量的实质","title":"变量的实质","index":"1.2"}]},{"id":"2.指针的实质","title":"2.指针的实质","index":"2","children":[{"id":"举个栗子","title":"举个栗子","index":"2.1"},{"id":"指针的实质","title":"指针的实质","index":"2.2"}]},{"id":"3.指针与数组名","title":"3.指针与数组名","index":"3","children":[{"id":"数组名","title":"数组名","index":"3.1"},{"id":"通过指针来访问数组","title":"通过指针来访问数组","index":"3.2"},{"id":"数组名与指针的区别","title":"数组名与指针的区别","index":"3.3"},{"id":"const-int-*p与int-*const-p","title":"const int *p与int *const p","index":"3.4"}]},{"id":"4.二级指针","title":"4.二级指针","index":"4"},{"id":"5.-函数参数的传递","title":"5. 函数参数的传递","index":"5","children":[{"id":"值传递","title":"值传递","index":"5.1"},{"id":"地址传递","title":"地址传递","index":"5.2"},{"id":"引用传递","title":"引用传递","index":"5.3"}]}],"copyright":{"published":"2021年9月30日","updated":"2021年9月30日","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"2302 字约 15 分钟"}